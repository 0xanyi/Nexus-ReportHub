"use client"

import React, { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { formatCurrency } from "@/lib/utils"
import { ChevronDown, ChevronRight } from "lucide-react"

interface CampaignData {
  id: string
  name: string
  autoGenerated: boolean
  totalAmount: number
  paymentCount: number
  zoneTotals: Array<{
    id: string
    name: string
    totalAmount: number
  }>
  groups: Array<{
    id: string
    name: string
    zoneName: string
    totalAmount: number
    churches: Array<{
      id: string
      name: string
      totalAmount: number
    }>
  }>
}

interface CampaignGivingOverviewProps {
  categories: CampaignData[]
}

export function CampaignGivingOverview({ categories }: CampaignGivingOverviewProps) {
  const [expandedCampaigns, setExpandedCampaigns] = useState<Set<string>>(new Set())
  const [expandedGroups, setExpandedGroups] = useState<Set<string>>(new Set())

  if (categories.length === 0) {
    return (
      <Card className="border-none bg-white/70 shadow-lg shadow-slate-900/5">
        <CardHeader>
          <CardTitle>Campaign Giving Report</CardTitle>
          <CardDescription>No campaign giving recorded yet.</CardDescription>
        </CardHeader>
      </Card>
    )
  }

  const toggleCampaign = (id: string) => {
    const newExpanded = new Set(expandedCampaigns)
    if (newExpanded.has(id)) {
      newExpanded.delete(id)
    } else {
      newExpanded.add(id)
    }
    setExpandedCampaigns(newExpanded)
  }

  const toggleGroup = (id: string) => {
    const newExpanded = new Set(expandedGroups)
    if (newExpanded.has(id)) {
      newExpanded.delete(id)
    } else {
      newExpanded.add(id)
    }
    setExpandedGroups(newExpanded)
  }

  // Calculate summary statistics
  const totalRaised = categories.reduce((sum, cat) => sum + cat.totalAmount, 0)
  const totalContributions = categories.reduce((sum, cat) => sum + cat.paymentCount, 0)
  const uniqueGroups = new Set(categories.flatMap((cat) => cat.groups.map((g) => g.id)))
  const uniqueChurches = new Set(
    categories.flatMap((cat) => cat.groups.flatMap((g) => g.churches.map((c) => c.id)))
  )

  return (
    <Card className="border-none bg-white/90 shadow-xl shadow-slate-900/5">
      <CardHeader>
        <CardTitle>Campaign Giving Report</CardTitle>
        <CardDescription>
          Comprehensive breakdown of campaign contributions across the organization
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Summary Statistics */}
        <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-5">
          <div className="rounded-xl border border-slate-200 bg-gradient-to-br from-blue-50 to-indigo-50 p-4">
            <div className="text-xs font-medium uppercase tracking-wide text-slate-600">
              Total Raised
            </div>
            <div className="mt-1 text-2xl font-bold text-slate-900">
              {formatCurrency(totalRaised, "GBP")}
            </div>
          </div>
          <div className="rounded-xl border border-slate-200 bg-white p-4">
            <div className="text-xs font-medium uppercase tracking-wide text-slate-600">
              Campaigns
            </div>
            <div className="mt-1 text-2xl font-bold text-slate-900">{categories.length}</div>
          </div>
          <div className="rounded-xl border border-slate-200 bg-white p-4">
            <div className="text-xs font-medium uppercase tracking-wide text-slate-600">
              Contributions
            </div>
            <div className="mt-1 text-2xl font-bold text-slate-900">{totalContributions}</div>
          </div>
          <div className="rounded-xl border border-slate-200 bg-white p-4">
            <div className="text-xs font-medium uppercase tracking-wide text-slate-600">
              Groups
            </div>
            <div className="mt-1 text-2xl font-bold text-slate-900">{uniqueGroups.size}</div>
          </div>
          <div className="rounded-xl border border-slate-200 bg-white p-4">
            <div className="text-xs font-medium uppercase tracking-wide text-slate-600">
              Churches
            </div>
            <div className="mt-1 text-2xl font-bold text-slate-900">{uniqueChurches.size}</div>
          </div>
        </div>

        {/* Campaign Tables */}
        <div className="space-y-4">
          {categories.map((category) => {
            const isExpanded = expandedCampaigns.has(category.id)
            const percentage = (category.totalAmount / totalRaised) * 100

            return (
              <div key={category.id} className="overflow-hidden rounded-xl border border-slate-200">
                {/* Campaign Header */}
                <div
                  className="cursor-pointer bg-gradient-to-r from-slate-50 to-slate-100/50 p-4 transition hover:from-slate-100 hover:to-slate-50"
                  onClick={() => toggleCampaign(category.id)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {isExpanded ? (
                        <ChevronDown className="h-5 w-5 text-slate-500" />
                      ) : (
                        <ChevronRight className="h-5 w-5 text-slate-500" />
                      )}
                      <div>
                        <div className="flex items-center gap-2">
                          <h3 className="font-semibold text-slate-900">{category.name}</h3>
                          {category.autoGenerated && (
                            <span className="rounded-full bg-slate-200 px-2 py-0.5 text-xs font-medium text-slate-600">
                              Auto
                            </span>
                          )}
                        </div>
                        <div className="mt-0.5 text-xs text-slate-500">
                          {category.paymentCount} contribution
                          {category.paymentCount === 1 ? "" : "s"} â€¢{" "}
                          {category.groups.reduce((sum, g) => sum + g.churches.length, 0)} churches
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-xl font-bold text-slate-900">
                        {formatCurrency(category.totalAmount, "GBP")}
                      </div>
                      <div className="text-xs text-slate-500">{percentage.toFixed(1)}% of total</div>
                    </div>
                  </div>

                  {/* Progress Bar */}
                  <div className="mt-3 h-2 overflow-hidden rounded-full bg-slate-200">
                    <div
                      className="h-full bg-gradient-to-r from-blue-500 to-indigo-600"
                      style={{ width: `${Math.min(percentage, 100)}%` }}
                    />
                  </div>
                </div>

                {/* Expandable Content */}
                {isExpanded && (
                  <div className="border-t border-slate-200 bg-white">
                    {/* Group Summary Table */}
                    <div className="overflow-x-auto">
                      <table className="w-full text-sm">
                        <thead>
                          <tr className="border-b border-slate-200 bg-slate-50/50">
                            <th className="px-4 py-3 text-left font-medium text-slate-700">
                              Group
                            </th>
                            <th className="px-4 py-3 text-left font-medium text-slate-700">Zone</th>
                            <th className="px-4 py-3 text-right font-medium text-slate-700">
                              Churches
                            </th>
                            <th className="px-4 py-3 text-right font-medium text-slate-700">
                              Amount
                            </th>
                            <th className="px-4 py-3 text-right font-medium text-slate-700">
                              % of Campaign
                            </th>
                            <th className="w-10 px-4 py-3"></th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-slate-100">
                          {category.groups
                            .sort((a, b) => b.totalAmount - a.totalAmount)
                            .map((group) => {
                              const groupExpanded = expandedGroups.has(group.id)
                              const groupPercentage = (group.totalAmount / category.totalAmount) * 100

                              return (
                                <React.Fragment key={group.id}>
                                  <tr
                                    className="cursor-pointer transition hover:bg-slate-50"
                                    onClick={() => toggleGroup(group.id)}
                                  >
                                    <td className="px-4 py-3 font-medium text-slate-900">
                                      {group.name}
                                    </td>
                                    <td className="px-4 py-3 text-slate-600">{group.zoneName}</td>
                                    <td className="px-4 py-3 text-right text-slate-600">
                                      {group.churches.length}
                                    </td>
                                    <td className="px-4 py-3 text-right font-semibold text-slate-900">
                                      {formatCurrency(group.totalAmount, "GBP")}
                                    </td>
                                    <td className="px-4 py-3 text-right text-slate-600">
                                      {groupPercentage.toFixed(1)}%
                                    </td>
                                    <td className="px-4 py-3 text-center">
                                      {groupExpanded ? (
                                        <ChevronDown className="h-4 w-4 text-slate-400" />
                                      ) : (
                                        <ChevronRight className="h-4 w-4 text-slate-400" />
                                      )}
                                    </td>
                                  </tr>

                                  {/* Church Details */}
                                  {groupExpanded && (
                                    <tr>
                                      <td colSpan={6} className="bg-slate-50/30 px-4 py-3">
                                        <div className="grid gap-2 sm:grid-cols-2 lg:grid-cols-3">
                                          {group.churches
                                            .sort((a, b) => b.totalAmount - a.totalAmount)
                                            .map((church) => (
                                              <div
                                                key={church.id}
                                                className="flex items-center justify-between rounded-lg border border-slate-200 bg-white px-3 py-2"
                                              >
                                                <span className="text-sm font-medium text-slate-700">
                                                  {church.name}
                                                </span>
                                                <span className="text-sm font-semibold text-slate-900">
                                                  {formatCurrency(church.totalAmount, "GBP")}
                                                </span>
                                              </div>
                                            ))}
                                        </div>
                                      </td>
                                    </tr>
                                  )}
                                </React.Fragment>
                              )
                            })}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}
              </div>
            )
          })}
        </div>
      </CardContent>
    </Card>
  )
}
