import { auth } from "@/auth"
import { redirect } from "next/navigation"
import Link from "next/link"
import { formatCurrency } from "@/lib/utils"
import { prisma } from "@/lib/prisma"

interface CampaignDetail {
  id: string
  name: string
  normalizedName: string
  autoGenerated: boolean
  department: {
    id: string
    name: string
  }
  totalAmount: number
  paymentCount: number
  zoneBreakdown: Array<{
    id: string
    name: string
    total: number
  }>
  groupBreakdown: Array<{
    id: string
    name: string
    zoneName: string
    total: number
    churches: Array<{
      id: string
      name: string
      total: number
    }>
  }>
  createdAt: string
  updatedAt: string
}

async function getCampaign(id: string): Promise<CampaignDetail> {
  const campaign = await prisma.campaignCategory.findUnique({
    where: { id },
    include: {
      department: {
        select: {
          id: true,
          name: true,
        },
      },
      payments: {
        include: {
          church: {
            include: {
              group: {
                include: {
                  zone: true,
                },
              },
            },
          },
        },
        orderBy: {
          paymentDate: "desc",
        },
      },
    },
  })

  if (!campaign) {
    throw new Error("Campaign not found")
  }

  const zoneTotals = new Map<string, { id: string; name: string; total: number }>()
  const groupTotals = new Map<string, {
    id: string
    name: string
    zoneName: string
    total: number
    churches: Map<string, { id: string; name: string; total: number }>
  }>()

  let totalAmount = 0

  for (const payment of campaign.payments) {
    const amount = Number(payment.amount)
    totalAmount += amount

    const church = payment.church
    const group = church?.group
    const zone = group?.zone

    if (!church || !group || !zone) continue

    if (!zoneTotals.has(zone.id)) {
      zoneTotals.set(zone.id, { id: zone.id, name: zone.name, total: 0 })
    }
    zoneTotals.get(zone.id)!.total += amount

    if (!groupTotals.has(group.id)) {
      groupTotals.set(group.id, {
        id: group.id,
        name: group.name,
        zoneName: zone.name,
        total: 0,
        churches: new Map(),
      })
    }

    const groupEntry = groupTotals.get(group.id)!
    groupEntry.total += amount

    if (!groupEntry.churches.has(church.id)) {
      groupEntry.churches.set(church.id, { id: church.id, name: church.name, total: 0 })
    }

    groupEntry.churches.get(church.id)!.total += amount
  }

  const zoneBreakdown = Array.from(zoneTotals.values()).sort((a, b) => b.total - a.total)

  const groupBreakdown = Array.from(groupTotals.values()).map((group) => ({
    id: group.id,
    name: group.name,
    zoneName: group.zoneName,
    total: group.total,
    churches: Array.from(group.churches.values()).sort((a, b) => b.total - a.total),
  })).sort((a, b) => b.total - a.total)

  return {
    id: campaign.id,
    name: campaign.name,
    normalizedName: campaign.normalizedName,
    autoGenerated: campaign.autoGenerated,
    department: campaign.department,
    totalAmount,
    paymentCount: campaign.payments.length,
    zoneBreakdown,
    groupBreakdown,
    createdAt: campaign.createdAt.toISOString(),
    updatedAt: campaign.updatedAt.toISOString(),
  }
}

export default async function CampaignDetailPage({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const session = await auth()

  if (!session?.user) {
    redirect("/login")
  }

  const { id } = await params
  const campaign = await getCampaign(id)

  return (
    <div className="space-y-8">
      <div className="flex items-start justify-between">
        <div>
          <div className="flex items-center gap-3">
            <Link
              href="/dashboard/campaigns"
              className="text-slate-600 hover:text-slate-900"
            >
              <svg
                className="h-6 w-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M10 19l-7-7m0 0l7-7m-7 7h18"
                />
              </svg>
            </Link>
            <h1 className="text-3xl font-bold tracking-tight text-slate-900">
              {campaign.name}
            </h1>
            {campaign.autoGenerated && (
              <span className="rounded-full bg-slate-100 px-3 py-1 text-sm text-slate-600">
                Auto-Generated
              </span>
            )}
          </div>
          <p className="mt-2 text-slate-600">{campaign.department.name}</p>
        </div>
      </div>

      <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
        <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-slate-600">Total Raised</p>
              <p className="mt-2 text-3xl font-bold text-emerald-600">
                {formatCurrency(campaign.totalAmount)}
              </p>
            </div>
            <div className="rounded-xl bg-emerald-50 p-3">
              <svg
                className="h-6 w-6 text-emerald-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            </div>
          </div>
        </div>

        <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-slate-600">Total Payments</p>
              <p className="mt-2 text-3xl font-bold text-slate-900">
                {campaign.paymentCount}
              </p>
            </div>
            <div className="rounded-xl bg-blue-50 p-3">
              <svg
                className="h-6 w-6 text-blue-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                />
              </svg>
            </div>
          </div>
        </div>

        <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-slate-600">Avg per Payment</p>
              <p className="mt-2 text-3xl font-bold text-slate-900">
                {campaign.paymentCount > 0
                  ? formatCurrency(campaign.totalAmount / campaign.paymentCount)
                  : formatCurrency(0)}
              </p>
            </div>
            <div className="rounded-xl bg-purple-50 p-3">
              <svg
                className="h-6 w-6 text-purple-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"
                />
              </svg>
            </div>
          </div>
        </div>
      </div>

      {campaign.zoneBreakdown.length > 0 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold text-slate-900">
            Breakdown by Zone
          </h2>
          <div className="overflow-hidden rounded-2xl border border-slate-200 bg-white shadow-sm">
            <table className="min-w-full divide-y divide-slate-200">
              <thead className="bg-slate-50">
                <tr>
                  <th className="px-6 py-4 text-left text-xs font-semibold uppercase tracking-wider text-slate-600">
                    Zone
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-semibold uppercase tracking-wider text-slate-600">
                    Total Raised
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-semibold uppercase tracking-wider text-slate-600">
                    % of Total
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-slate-200 bg-white">
                {campaign.zoneBreakdown.map((zone) => {
                  const percentage = campaign.totalAmount > 0
                    ? (zone.total / campaign.totalAmount) * 100
                    : 0

                  return (
                    <tr key={zone.id} className="hover:bg-slate-50">
                      <td className="px-6 py-4 font-medium text-slate-900">
                        {zone.name}
                      </td>
                      <td className="px-6 py-4 text-right font-semibold text-slate-900">
                        {formatCurrency(zone.total)}
                      </td>
                      <td className="px-6 py-4 text-right text-sm text-slate-600">
                        {percentage.toFixed(1)}%
                      </td>
                    </tr>
                  )
                })}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {campaign.groupBreakdown.length > 0 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold text-slate-900">
            Breakdown by Group and Church
          </h2>
          <div className="space-y-6">
            {campaign.groupBreakdown.map((group) => (
              <div
                key={group.id}
                className="overflow-hidden rounded-2xl border border-slate-200 bg-white shadow-sm"
              >
                <div className="border-b border-slate-200 bg-slate-50 px-6 py-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="font-semibold text-slate-900">{group.name}</h3>
                      <p className="text-sm text-slate-600">{group.zoneName}</p>
                    </div>
                    <div className="text-right">
                      <p className="text-lg font-bold text-slate-900">
                        {formatCurrency(group.total)}
                      </p>
                      <p className="text-sm text-slate-600">
                        {group.churches.length} church{group.churches.length !== 1 ? "es" : ""}
                      </p>
                    </div>
                  </div>
                </div>
                {group.churches.length > 0 && (
                  <table className="min-w-full divide-y divide-slate-200">
                    <thead className="bg-slate-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider text-slate-600">
                          Church
                        </th>
                        <th className="px-6 py-3 text-right text-xs font-semibold uppercase tracking-wider text-slate-600">
                          Amount
                        </th>
                        <th className="px-6 py-3 text-right text-xs font-semibold uppercase tracking-wider text-slate-600">
                          % of Group
                        </th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-slate-200 bg-white">
                      {group.churches.map((church) => {
                        const percentage = group.total > 0
                          ? (church.total / group.total) * 100
                          : 0

                        return (
                          <tr key={church.id} className="hover:bg-slate-50">
                            <td className="px-6 py-3 text-sm text-slate-900">
                              <Link
                                href={`/dashboard/churches/${church.id}`}
                                className="text-blue-600 hover:text-blue-800"
                              >
                                {church.name}
                              </Link>
                            </td>
                            <td className="px-6 py-3 text-right text-sm font-semibold text-slate-900">
                              {formatCurrency(church.total)}
                            </td>
                            <td className="px-6 py-3 text-right text-sm text-slate-600">
                              {percentage.toFixed(1)}%
                            </td>
                          </tr>
                        )
                      })}
                    </tbody>
                  </table>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {campaign.paymentCount === 0 && (
        <div className="rounded-2xl border border-slate-200 bg-white p-12 text-center shadow-sm">
          <div className="mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-slate-100">
            <svg
              className="h-8 w-8 text-slate-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
          </div>
          <h3 className="mt-4 text-lg font-semibold text-slate-900">
            No payments yet
          </h3>
          <p className="mt-2 text-slate-600">
            This campaign has no payments recorded. Upload transaction data to see contributions.
          </p>
        </div>
      )}
    </div>
  )
}
