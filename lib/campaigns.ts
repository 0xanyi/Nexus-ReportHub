import { prisma } from "@/lib/prisma"

interface CampaignChurchSummary {
  id: string
  name: string
  totalAmount: number
}

interface CampaignGroupSummary {
  id: string
  name: string
  zoneId: string
  zoneName: string
  totalAmount: number
  churches: CampaignChurchSummary[]
}

interface CampaignZoneSummary {
  id: string
  name: string
  totalAmount: number
}

export interface CampaignCategorySummary {
  id: string
  name: string
  normalizedName: string
  autoGenerated: boolean
  totalAmount: number
  paymentCount: number
  zoneTotals: CampaignZoneSummary[]
  groups: CampaignGroupSummary[]
}

export async function getCampaignCategorySummaries(departmentId: string) {
  const categories = await prisma.campaignCategory.findMany({
    where: { departmentId },
    include: {
      payments: {
        where: {
          forPurpose: "SPONSORSHIP",
        },
        include: {
          church: {
            include: {
              group: {
                include: {
                  zone: true,
                },
              },
            },
          },
        },
      },
    },
    orderBy: {
      name: "asc",
    },
  })

  return categories.map<CampaignCategorySummary>((category) => {
    const zoneTotals = new Map<string, CampaignZoneSummary>()
    const groupTotals = new Map<string, CampaignGroupSummary & { churchesMap: Map<string, CampaignChurchSummary> }>()

    let totalAmount = 0

    for (const payment of category.payments) {
      const amount = Number(payment.amount)
      if (!Number.isFinite(amount) || amount === 0) {
        continue
      }

      totalAmount += amount

      const church = payment.church
      const group = church?.group
      const zone = group?.zone

      if (!church || !group || !zone) {
        continue
      }

      if (!zoneTotals.has(zone.id)) {
        zoneTotals.set(zone.id, {
          id: zone.id,
          name: zone.name,
          totalAmount: 0,
        })
      }
      zoneTotals.get(zone.id)!.totalAmount += amount

      if (!groupTotals.has(group.id)) {
        groupTotals.set(group.id, {
          id: group.id,
          name: group.name,
          zoneId: zone.id,
          zoneName: zone.name,
          totalAmount: 0,
          churches: [],
          churchesMap: new Map<string, CampaignChurchSummary>(),
        })
      }

      const groupEntry = groupTotals.get(group.id)!
      groupEntry.totalAmount += amount

      if (!groupEntry.churchesMap.has(church.id)) {
        groupEntry.churchesMap.set(church.id, {
          id: church.id,
          name: church.name,
          totalAmount: 0,
        })
      }

      const churchEntry = groupEntry.churchesMap.get(church.id)!
      churchEntry.totalAmount += amount
    }

    const zoneTotalsList = Array.from(zoneTotals.values()).sort((a, b) => b.totalAmount - a.totalAmount)

    const groupSummaries = Array.from(groupTotals.values())
      .map<CampaignGroupSummary>(({ churchesMap, ...rest }) => ({
        ...rest,
        churches: Array.from(churchesMap.values()).sort((a, b) => b.totalAmount - a.totalAmount),
      }))
      .sort((a, b) => b.totalAmount - a.totalAmount)

    return {
      id: category.id,
      name: category.name,
      normalizedName: category.normalizedName,
      autoGenerated: category.autoGenerated,
      totalAmount,
      paymentCount: category.payments.length,
      zoneTotals: zoneTotalsList,
      groups: groupSummaries,
    }
  })
}
